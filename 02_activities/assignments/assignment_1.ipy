{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working with parquet files\n",
    "\n",
    "## Objective\n",
    "\n",
    "+ In this assignment, we will use the data downloaded with the module `data_manager` to create features.\n",
    "\n",
    "(11 pts total)\n",
    "\n",
    "## Prerequisites\n",
    "\n",
    "+ This notebook assumes that price data is available to you in the environment variable `PRICE_DATA`. If you have not done so, then execute the notebook `production_2_data_engineering.ipynb` to create this data set.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Load the environment variables using dotenv. (1 pt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dotenv extension is already loaded. To reload it, use:\n",
      "  %reload_ext dotenv\n"
     ]
    }
   ],
   "source": [
    "# Write your code below.\n",
    "%load_ext dotenv\n",
    "%dotenv "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import dask\n",
    "dask.config.set({'dataframe.query-planning': True})\n",
    "import dask.dataframe as dd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Load the environment variable `PRICE_DATA`.\n",
    "+ Use [glob](https://docs.python.org/3/library/glob.html) to find the path of all parquet files in the directory `PRICE_DATA`.\n",
    "\n",
    "(1pt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import sys\n",
    "\n",
    "sys.path.append (os.getenv('PRICE_DATA'))\n",
    "\n",
    "from glob import glob\n",
    "parquet_files = os.getenv('PRICE_DATA')\n",
    "df = glob(os.path.join(parquet_files, \"*/*.parquet\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "dd_px = dd.read_parquet(parquet_files)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each ticker and using Dask, do the following:\n",
    "\n",
    "+ Add lags for variables Close and Adj_Close.\n",
    "+ Add returns based on Adjusted Close:\n",
    "    \n",
    "    - `returns`: (Adj Close / Adj Close_lag) - 1\n",
    "\n",
    "+ Add the following range: \n",
    "\n",
    "    - `hi_lo_range`: this is the day's High minus Low.\n",
    "\n",
    "+ Assign the result to `dd_feat`.\n",
    "\n",
    "(4 pt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_20136\\1577044504.py:2: UserWarning: `meta` is not specified, inferred from partial data. Please provide `meta` if the result is unexpected.\n",
      "  Before: .apply(func)\n",
      "  After:  .apply(func, meta={'x': 'f8', 'y': 'f8'}) for dataframe result\n",
      "  or:     .apply(func, meta=('x', 'f8'))            for series result\n",
      "  dd_feat = (dd_px.groupby('ticker', group_keys=False).apply(\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "dd_feat = (dd_px.groupby('ticker', group_keys=False).apply(\n",
    "    lambda x: x.assign(Close_lag = x['Close'].shift(1))\n",
    ").assign(\n",
    "    returns = lambda x: x['Close']/x['Close_lag'] - 1\n",
    ").assign( \n",
    "    hi_lo_range = lambda x: x['High'] - x['Low'] \n",
    "))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><strong>Dask DataFrame Structure:</strong></div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>sector</th>\n",
       "      <th>subsector</th>\n",
       "      <th>year</th>\n",
       "      <th>Close_lag</th>\n",
       "      <th>returns</th>\n",
       "      <th>hi_lo_range</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>npartitions=11217</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>datetime64[ns]</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>int64</td>\n",
       "      <td>object</td>\n",
       "      <td>object</td>\n",
       "      <td>int32</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<div>Dask Name: assign, 13 expressions</div>"
      ],
      "text/plain": [
       "Dask DataFrame Structure:\n",
       "                             Date     Open     High      Low    Close Adj Close Volume  sector subsector   year Close_lag  returns hi_lo_range\n",
       "npartitions=11217                                                                                                                             \n",
       "                   datetime64[ns]  float64  float64  float64  float64   float64  int64  object    object  int32   float64  float64     float64\n",
       "                              ...      ...      ...      ...      ...       ...    ...     ...       ...    ...       ...      ...         ...\n",
       "...                           ...      ...      ...      ...      ...       ...    ...     ...       ...    ...       ...      ...         ...\n",
       "                              ...      ...      ...      ...      ...       ...    ...     ...       ...    ...       ...      ...         ...\n",
       "                              ...      ...      ...      ...      ...       ...    ...     ...       ...    ...       ...      ...         ...\n",
       "Dask Name: assign, 13 expressions\n",
       "Expr=Assign(frame=Assign(frame=Assign(frame=Assign(frame=GroupByApply(frame=ReadParquetFSSpec(46d159d), observed=False, group_keys=False, func=<function <lambda> at 0x000001AAD8E01DA0>, meta=<no_default>, args=(), kwargs={})))))"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dd_feat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Convert the Dask data frame to a pandas data frame. \n",
    "+ Add a rolling average return calculation with a window of 10 days.\n",
    "+ *Tip*: Consider using `.rolling(10).mean()`.\n",
    "\n",
    "(3 pt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Date       Open       High        Low      Close  Adj Close  \\\n",
      "ticker                                                                     \n",
      "IP     2004-01-02  40.671135  40.671135  39.858646  39.914680  18.959667   \n",
      "IP     2004-01-05  40.110798  40.736507  39.914680  40.717831  19.341162   \n",
      "IP     2004-01-06  40.503033  41.016678  40.409645  40.876591  19.416569   \n",
      "IP     2004-01-07  40.633778  41.520981  40.559067  41.334202  19.633945   \n",
      "IP     2004-01-08  41.334202  42.034622  41.231472  42.006603  19.953333   \n",
      "...           ...        ...        ...        ...        ...        ...   \n",
      "BXP    2001-12-24  38.000000  38.500000  38.000000  38.320000  13.684837   \n",
      "BXP    2001-12-26  37.750000  38.150002  37.700001  38.099998  13.815374   \n",
      "BXP    2001-12-27  38.200001  38.500000  37.990002  37.990002  13.775489   \n",
      "BXP    2001-12-28  37.990002  38.349998  37.950001  38.200001  13.851641   \n",
      "BXP    2001-12-31  38.250000  38.349998  37.820000  38.000000  13.779115   \n",
      "\n",
      "         Volume       sector                                       subsector  \\\n",
      "ticker                                                                         \n",
      "IP      2145530    Materials  Paper & Plastic Packaging Products & Materials   \n",
      "IP      2752236    Materials  Paper & Plastic Packaging Products & Materials   \n",
      "IP      2976458    Materials  Paper & Plastic Packaging Products & Materials   \n",
      "IP      3738642    Materials  Paper & Plastic Packaging Products & Materials   \n",
      "IP      4110097    Materials  Paper & Plastic Packaging Products & Materials   \n",
      "...         ...          ...                                             ...   \n",
      "BXP       73700  Real Estate                                    Office REITs   \n",
      "BXP      292000  Real Estate                                    Office REITs   \n",
      "BXP      126600  Real Estate                                    Office REITs   \n",
      "BXP      195600  Real Estate                                    Office REITs   \n",
      "BXP      168200  Real Estate                                    Office REITs   \n",
      "\n",
      "        year  Close_lag   returns  hi_lo_range  rolling_avg_return  \n",
      "ticker                                                              \n",
      "IP      2004        NaN       NaN     0.812489                 NaN  \n",
      "IP      2004  39.914680  0.020122     0.821827                 NaN  \n",
      "IP      2004  40.717831  0.003899     0.607033                 NaN  \n",
      "IP      2004  40.876591  0.011195     0.961914                 NaN  \n",
      "IP      2004  41.334202  0.016267     0.803150                 NaN  \n",
      "...      ...        ...       ...          ...                 ...  \n",
      "BXP     2001  37.930000  0.010282     0.500000            0.001519  \n",
      "BXP     2001  38.320000 -0.005741     0.450001            0.000944  \n",
      "BXP     2001  38.099998 -0.002887     0.509998            0.000921  \n",
      "BXP     2001  37.990002  0.005528     0.399998            0.002748  \n",
      "BXP     2001  38.200001 -0.005236     0.529999            0.001606  \n",
      "\n",
      "[2742203 rows x 14 columns]\n"
     ]
    }
   ],
   "source": [
    "import warnings \n",
    "warnings.filterwarnings(\"ignore\")\n",
    "# Step 1: Convert Dask DataFrame to Pandas DataFrame\n",
    "pandas_df = dd_feat.compute()\n",
    "\n",
    "# Step 2: Add a rolling average return calculation with a window of 10 days grouped by 'ticker'\n",
    "pandas_df['rolling_avg_return'] = pandas_df.groupby('ticker', sort =False)['returns'].rolling(window=10).mean().reset_index(level=0, drop=True)\n",
    "\n",
    "# Display the resulting Pandas DataFrame with the rolling average return\n",
    "print(pandas_df)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Please comment:\n",
    "\n",
    "+ Was it necessary to convert to pandas to calculate the moving average return? No\n",
    "+ Would it have been better to do it in Dask? Why? In the newer version of Dask, the rolling average and mean fucntions could have been applied resulting in a more efficient process of data.\n",
    "\n",
    "(1 pt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Criteria\n",
    "\n",
    "|Criteria|Complete|Incomplete|\n",
    "|---------------------|----|----|\n",
    "|Calculations         |Calculations were done correctly.|Calculations were not done correctly.|\n",
    "|Explanation of answer|Answer was concise and explained the learner's reasoning in depth.|Answer was not concise and did not explained the learner's reasoning in depth.|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Submission Information\n",
    "\n",
    "🚨 **Please review our [Assignment Submission Guide](https://github.com/UofT-DSI/onboarding/blob/main/onboarding_documents/submissions.md)** 🚨 for detailed instructions on how to format, branch, and submit your work. Following these guidelines is crucial for your submissions to be evaluated correctly.\n",
    "\n",
    "### Submission Parameters:\n",
    "* Submission Due Date: `HH:MM AM/PM - DD/MM/YYYY`\n",
    "* The branch name for your repo should be: `assignment-1`\n",
    "* What to submit for this assignment:\n",
    "    * This Jupyter Notebook (assignment_1.ipynb) should be populated and should be the only change in your pull request.\n",
    "* What the pull request link should look like for this assignment: `https://github.com/<your_github_username>/production/pull/<pr_id>`\n",
    "    * Open a private window in your browser. Copy and paste the link to your pull request into the address bar. Make sure you can see your pull request properly. This helps the technical facilitator and learning support staff review your submission easily.\n",
    "\n",
    "Checklist:\n",
    "- [ ] Created a branch with the correct naming convention.\n",
    "- [ ] Ensured that the repository is public.\n",
    "- [ ] Reviewed the PR description guidelines and adhered to them.\n",
    "- [ ] Verify that the link is accessible in a private browser window.\n",
    "\n",
    "If you encounter any difficulties or have questions, please don't hesitate to reach out to our team via our Slack at `#cohort-3-help`. Our Technical Facilitators and Learning Support staff are here to help you navigate any challenges."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
